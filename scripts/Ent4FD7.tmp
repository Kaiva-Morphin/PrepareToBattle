[gd_scene load_steps=8 format=3 uid="uid://dl8rc8ryu850g"]

[ext_resource type="Texture2D" uid="uid://wf2wxgguxpf3" path="res://src/sprites/levellabel.png" id="2_57mqj"]
[ext_resource type="FontFile" uid="uid://cwp7h6bubwify" path="res://src/assets/fonts/visitor-brk/visitor1.ttf" id="3_jjtf8"]
[ext_resource type="Texture2D" uid="uid://ldanhp1iacqk" path="res://src/sprites/healthlabel.png" id="4_srrrc"]
[ext_resource type="Texture2D" uid="uid://gsv8yho6nxie" path="res://src/sprites/healthlabel_progress.png" id="5_surlc"]
[ext_resource type="AudioStream" uid="uid://dyn0jku8dkoqw" path="res://src/assets/sound/walk.mp3" id="6_eqdc8"]

[sub_resource type="GDScript" id="GDScript_t45c4"]
script/source = "class_name Entity
extends CharacterBody2D

var in_inventory = false

@export var weapon : Weapon = null

@export var paused := true

@export var target : Entity = null
@export var team : Game.Team
var attributes
var attribute_container

var current_hp

@onready var collision = get_node(\"Collision\")
var current_state = Game.EntityState.seek

@onready var animation_player = get_node_or_null(\"Animation\")

func reset():
	self.pause()
	target = null
	current_state = Game.EntityState.seek
	current_hp = attribute_container.get_attribute_or_null(Stats.AttributeType.health)
	update_health()
	weapon.stop()
	if animation_player:
		animation_player.play(\"RESET\")

func update_container():
	attribute_container.force_update()
	current_hp = attribute_container.get_attribute_or_null(Stats.AttributeType.health)
	update_health()
	weapon.apply_container_stats(self)
	$EntityLabel/Level/Label.text = Stats.get_rarity_char(attributes.item_rarity)

func generate_container():
	attribute_container = Stats.AttributeContainer.new()
	attribute_container.current_character = attributes
	attribute_container.current_weapon = weapon.weapon_attributes
	attribute_container.force_update()
	current_hp = attribute_container.get_attribute_or_null(Stats.AttributeType.health)
	update_health()
	weapon.apply_container_stats(self)
	$EntityLabel/Level/Label.text = Stats.get_rarity_char(attributes.item_rarity)

func set_weapon(e : Weapon):
	set_weapon_noupdate(e)
	attribute_container.override_weapon_attributes(e.weapon_attributes)


func set_weapon_noupdate(e : Weapon):
	for c in $Mirror/Weapon.get_children():
		$Mirror/Weapon.remove_child(c)
		c.queue_free()
	weapon = e
	$Mirror/Weapon.add_child(e)
	


func _ready():
	var color
	match team:
		Game.Team.player:
			self.add_to_group(\"player\")
			color = Color.AQUA
		Game.Team.enemy:
			self.add_to_group(\"enemy\")
			color = Color.PALE_VIOLET_RED
		Game.Team.other:
			self.add_to_group(\"other\")
			color = Color.WHITE
		null:
			color = Color.BLACK
	$EntityLabel.modulate = color
	if !paused:
		init()

func pause():
	paused = true
	$Walk.playing = false
	$UpdateTargetPosition.stop()
	$UpdateTargets.stop()

func unpause():
	paused = false
	init()

func init():
	$UpdateTargetPosition.start()
	$UpdateTargets.start()
	weapon = get_node(\"Mirror/Weapon\").get_child(0)
	if !weapon:
		weapon = preload(\"res://src/Weapons/Fists.tscn\").instantiate()
	state_sounds(current_state)
	_on_state_changed(current_state)

func state_sounds(state):
	match state:
		Game.EntityState.seek:
			if !$Walk.playing:
				$Walk.playing = true
				$Walk.pitch_scale = .9 + randf() * 0.2
				$Walk.volume_db = -0.3 + randf() * 0.6
		_:
			if $Walk.playing:
				$Walk.playing = false

func _on_state_changed(_new_state):
	pass



func take_damage(amount):
	current_hp -= amount
	if current_hp <= 0: death()
	update_health()
	_on_take_damage()

func _on_take_damage():
	pass



func _on_update_targets_timeout():
	if Game.manager:
		var new_target = Game.manager.get_closest_oppositive_team_member(self.position, self.team)
		if new_target:
			target = new_target
			if target.position.distance_squared_to(self.position) > attribute_container.get_attribute_or_null(Stats.AttributeType.attack_range) ** 2:
				current_state = Game.EntityState.seek
				state_sounds(current_state)
				_on_state_changed(current_state)
			state_sounds(current_state)
			_on_state_changed(current_state) # update weapon target
			if target.position.x - self.position.x > 0:
				$Mirror.scale.x = 1
			else:
				$Mirror.scale.x = -1
		else:
			current_state = Game.EntityState.idle
			state_sounds(current_state)
			_on_state_changed(current_state)
		#$UpdateTargets.start()

func _physics_process(_delta): # move torwards target (if state)
	if !paused:
		var direction = Vector2.ZERO
		if current_state == Game.EntityState.seek and target and is_instance_valid(target):
			var near = target.position.distance_squared_to(self.position) < attribute_container.get_attribute_or_null(Stats.AttributeType.attack_range) ** 2
			if near:
				current_state = Game.EntityState.near
				state_sounds(current_state)
				_on_state_changed(current_state)
				if target.position.x - self.position.x > 0:
					$Mirror.scale.x = 1
				else:
					$Mirror.scale.x = -1
			else:
				direction = to_local($NavigationAgent2D.get_next_path_position()).normalized()
		if direction:
			if direction.x > 0:
				$Mirror.scale.x = 1
			else:
				$Mirror.scale.x = -1
		velocity = direction * attribute_container.get_attribute_or_null(Stats.AttributeType.speed)
		move_and_slide()

func _process(_delta: float) -> void:
	var debug_text = str(self.current_state) + \"\\n\"
	if target and is_instance_valid(target):
		debug_text += str(self.target.name) + \"\\n\"
	if weapon and is_instance_valid(weapon):
		debug_text += str(self.weapon.attack_range) + \"\\n\"
	$DEBUG.text = debug_text

func update_health():
	$EntityLabel/Level/Health.value = current_hp / attribute_container.get_attribute_or_null(Stats.AttributeType.health) * 100

func _on_update_target_position_timeout():
	if target and is_instance_valid(target):
		$NavigationAgent2D.target_position = target.global_position
	#$UpdateTargetPosition.start()

func death():
	self.queue_free()

func _on_regenerate_timeout() -> void:
	current_hp += attribute_container.get_attribute_or_null(Stats.AttributeType.health_regeneration)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_6vtff"]
radius = 5.09902

[node name="Entity" type="CharacterBody2D" groups=["entity"]]
script = SubResource("GDScript_t45c4")
paused = null
team = 2

[node name="Collision" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_6vtff")

[node name="Mirror" type="Node2D" parent="."]

[node name="Weapon" type="Node2D" parent="Mirror"]

[node name="UpdateTargetPosition" type="Timer" parent="."]
wait_time = 0.1

[node name="Regenerate" type="Timer" parent="."]

[node name="UpdateTargets" type="Timer" parent="."]
wait_time = 0.5

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
path_postprocessing = 1
debug_enabled = true
debug_use_custom = true
debug_path_custom_color = Color(1, 1, 1, 0.027451)

[node name="EntityLabel" type="Control" parent="."]
z_index = 10
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -5.0
offset_top = -12.0
offset_right = -5.0
offset_bottom = -12.0
grow_horizontal = 2
grow_vertical = 2

[node name="Level" type="TextureRect" parent="EntityLabel"]
layout_mode = 0
offset_left = -7.0
offset_top = -5.0
offset_right = 2.0
offset_bottom = 4.0
texture = ExtResource("2_57mqj")

[node name="Label" type="Label" parent="EntityLabel/Level"]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.611
anchor_top = 0.5
anchor_right = 0.611
anchor_bottom = 0.5
offset_left = -3.499
offset_top = -4.5
offset_right = 3.501
offset_bottom = 4.5
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/font_color = Color(0, 0, 0, 1)
theme_override_fonts/font = ExtResource("3_jjtf8")
theme_override_font_sizes/font_size = 10
text = "E"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Health" type="TextureProgressBar" parent="EntityLabel/Level"]
layout_mode = 1
anchors_preset = 4
anchor_top = 0.5
anchor_bottom = 0.5
offset_left = 8.0
offset_top = -2.5
offset_right = 24.0
offset_bottom = 2.5
grow_vertical = 2
pivot_offset = Vector2(0, 2)
value = 100.0
texture_under = ExtResource("4_srrrc")
texture_progress = ExtResource("5_surlc")
texture_progress_offset = Vector2(1, 1)

[node name="DEBUG" type="Label" parent="."]
visible = false
offset_left = -30.0
offset_top = -40.0
offset_right = 56.0
offset_bottom = -17.0
scale = Vector2(0.505, 0.505)
text = "DEBUG"

[node name="Walk" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("6_eqdc8")
volume_db = 0.3

[connection signal="timeout" from="UpdateTargetPosition" to="." method="_on_update_target_position_timeout"]
[connection signal="timeout" from="Regenerate" to="." method="_on_regenerate_timeout"]
[connection signal="timeout" from="UpdateTargets" to="." method="_on_update_targets_timeout"]
